worker_processes        auto;
worker_cpu_affinity     auto;
worker_rlimit_nofile    8196;

events {
    multi_accept        on;
    worker_connections  1024;
}

stream {
    log_format stream '$remote_addr [$time_local] $ssl_preread_server_name = $backend'
    access_log /dev/stdout stream;

    map $ssl_preread_server_name    $backend {
        dockge.vanderwerf.dev       dockge;
	ha.vanderwerf.dev           homeassistant;
        jellyfin.vanderwerf.dev     jellyfin;
        prism.vanderwerf.dev        photoprism;
        default                     vercel;
    }
    upstream dockge         { server localhost:8001; }
    upstream homeassistant  { server localhost:8002; }
    upstream jellyfin       { server localhost:8003; }
    upstream photoprism     { server localhost:8004; }
    upstream vercel         { server vanderwerf.vercel.app:443; }
    server {
        listen                  443 proxy_protocol;
	set_real_ip_from        10.4.0.0/16;
        proxy_connect_timeout   5s;
        proxy_timeout           1h;
        proxy_pass              $backend;
        proxy_protocol          on;
        ssl_preread             on;
    }
}

http {
    include         mime.types;
    default_type    application/octet-stream;

    sendfile            on;
    tcp_nopush          on;
    keepalive_timeout   65;
    #gzip                on;
    types_hash_max_size 4096;

    # error_log  /dev/stdout debug;

    resolver 127.0.0.11 valid=30s;

    include sites-enabled/*;

    server {
        server_name dockge.vanderwerf.dev;
        listen 8001 ssl proxy_protocol;
	http2 on;
        ssl_certificate     /etc/letsencrypt/live/dockge.vanderwerf.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dockge.vanderwerf.dev/privkey.pem;
	set_real_ip_from 127.0.0.1/32;
	real_ip_header proxy_protocol;
        set $dockge "http://dockge:5001";
        location / {
            proxy_pass $dockge;
            proxy_set_header Host $host;
            proxy_set_header Forwarded $remote_addr;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "upgrade";
        }
    }
    server {
        server_name ha.vanderwerf.dev;
	listen 8002 ssl proxy_protocol;
	http2 on;
        ssl_certificate     /etc/letsencrypt/live/ha.vanderwerf.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/ha.vanderwerf.dev/privkey.pem;
	set_real_ip_from 127.0.0.1/32;
	real_ip_header proxy_protocol;
        set $assistant "http://assistant:8123";
        location / {
            proxy_pass $assistant;
            proxy_set_header Host $host;
            proxy_set_header X-Real-Ip $remote_addr;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "upgrade";
        }
    }
    server {
        server_name jellyfin.vanderwerf.dev;
        listen 8003 ssl proxy_protocol;
	http2 on;
        ssl_certificate     /etc/letsencrypt/live/jellyfin.vanderwerf.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/jellyfin.vanderwerf.dev/privkey.pem;
	set_real_ip_from 127.0.0.1/32;
	real_ip_header proxy_protocol;
	add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "0"; # Do NOT enable. This is obsolete/dangerous
        add_header X-Content-Type-Options "nosniff";
	add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Resource-Policy "same-origin" always;
	client_max_body_size 20M;
        set $jelly "http://jellyfin:8096";
        location / {
            proxy_pass $jelly;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Protocol $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
	    proxy_buffering off;
        }
	# location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
        location = /web/ {
            # Proxy main Jellyfin traffic
            proxy_pass $jelly;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Protocol $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
        }
        location /socket {
            # Proxy Jellyfin Websockets traffic
            proxy_pass $jelly;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Protocol $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
        }
    }
    server {
        server_name prism.vanderwerf.dev;
        listen 8004 ssl proxy_protocol;
	http2 on;
        ssl_certificate     /etc/letsencrypt/live/prism.vanderwerf.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/prism.vanderwerf.dev/privkey.pem;
	set_real_ip_from 127.0.0.1/32;
	real_ip_header proxy_protocol;
        set $prism "http://photoprism:2342";
        location / {
            proxy_pass $prism;
            proxy_set_header Host $host;
            proxy_set_header Forwarded $remote_addr;
	    proxy_buffering off;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "upgrade";
        }
    }
}

